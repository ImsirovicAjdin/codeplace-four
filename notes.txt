Directory Course from Codeplace, on Rails 5

1
gem install rails
rails -v // 5.02

2
rails new stukplaces // stukplaces/ folder created, 
    how to run rails 5 on c9.io?

3
cd estuk; rails server -b $IP -p $PORT; 
    it's running, how to get to it?
click on 'Share' next to gear in c9 workspace, copy the 2nd link, paste in new tab and run

4
SAVE FIRST COMMIT: 
    git init; git add --all; git commit; (not passing -m will open the nano editor to add the commit message)
    type the commit message
    CTRL O; [ENTER]; CTRL X (save the message; confirm command; exit nano editor)
    
5
ADD REMOTE REPOSITORY:
    In github, click new repository, give it a good name and description, then:
    git remote add origin https://github.com/ImsirovicAjdin/codeplace-four.git
    git push -u origin master
    
####################

13
INSTALLING BOOTSTRAP

Step 1
We will be using our favourite Front-End framework of choice, bootstrap!

Head over to the seyhunak/twitter-bootstrap-rails gem documentation on Github, and take a short look at the instructions. When you're done, we'll add the gem to our gemfile and run the bundle install command. 
https://github.com/seyhunak/twitter-bootstrap-rails

./gemfile.rb
gem 'twitter-bootstrap-rails', :git => 'git://github.com/seyhunak/twitter-bootstrap-rails.git'

 we could also just use 'bundle' to substitute 'bundle install'

Step 2
As noticed in the documentation, we need to run a generator for us to install bootstrap. We want to specify the use of static files for our app.

rails g bootstrap:install static

Step 3
Save our work, commit it to Github.

git commit -m "Install bootstrap"

###########
14 
INSTALL FONTAWESOME

Step 1
To add some more awesome styling power in our application, we are going to use Icons. 
And one of the best assets out there is 'font-awesome'. 

Check out the documentation for the bokmann/font-awesome-rails gem, and if you did, add it to the gemfile and run bundle. 
https://github.com/bokmann/font-awesome-rails

Step 2
Open the gemfile, and add the gem to the bottom.

bundle

Step 3
And the best part is, that we only have to add one line to the applications.css assets pipeline in order for the font-awesome to work! 
./app/assets/stylesheets/application.css
<<EOF
 *
 *= require_tree .
 *= require font-awesome
 *= require_self
 */
 
Step 4
Save our work, and push it up to Github. 
git commit -m "Added Font-Awesome"


###########
15
INSTALL SIMPLE FORM

Step 1
Great apps have great forms! Lucky for us, there is an awesome gem from the hero's of Plataformatec that have simplified our life and standardizing a lot of work for us. 
Go to the plataformatec/simple_form documentation, and when you're done, add it to the bottom of the gemfile and run bundle. 
https://github.com/plataformatec/simple_form

./gemfile.rb
gem 'simple_form'

bundle

Step 2
We have read the documentation, so we know we have to run the simple_form generator, and specify the use of bootstrap.

rails g simple_form:install --bootstrap

Step 3
And save our work, commit it to Github.

git commit -m "Installed Simple Form"

###########
16
GENERATING THE HOME PAGE

Step 1
Every application needs a landing page right?
In my workflow I like to use a separate controller for all the static pages, like the home / contact / info kind of pages.  
Open the terminal, and run rails generate controller Pages home .This will create the PagesController with the :home action in it, and even open up a route for it.

rails g controller Pages home

 you can substitute rails generate, with rails g

Step 2
Let's set this new page as the root of our application, so that we can have our landing page. 
Open the routes.rb file, and substitute the     line   with: 
root 'pages#home' 
./app/config/routes.rb
<<BOF
Rails.application.routes.draw do
    
 # MAKE SURE TO REMOVE THE GET LINE
  get 'pages/home'
  root 'pages#home'        
  
  # The priority is based upon order of creation: first created -> highest priority.
  # See how all your routes lay out with "rake routes".
  ...
  
  
  
Step 3
Go to your console, start a new rails server, and inspect your localhost:3000/
rails s 

Step 4
And as usual, commit the work to Github.

git commit -m "Add PageController and landing page"


###########
17
CREATING A HEADER

Step 1
let's move on and create Navbar, we'll use the bootstrap navbar for this. 
But first, let's create a new _header.html.erb partial in our app/views/layouts/ folder. 
touch ./app/views/layouts/_header.html.erb

And render our new _header partial in the layouts/application.html.erb.
./app/views/layouts/application.html.erb
<<EOF
        <body>
        
        	<%= render 'layouts/header' %>
        
        	<%= yield %>
        
        </body>
        </html>

Step 2
In your browser, navigate to getbootstrap.com, and copy-paste the entire navbar elements, to your new _header partial. 
./app/views/layouts/_header.html.erb
        <nav class="navbar navbar-default">
          <div class="container-fluid">
            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
              <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand" href="#">StukPlaces</a>
            </div>
        
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
              <ul class="nav navbar-nav">
                <li class="active"><a href="#">Places<span class="sr-only">(current)</span></a></li>
                
                
              </ul>
              <form class="navbar-form navbar-left" role="search">
                <div class="form-group">
                  <input type="text" class="form-control" placeholder="Search">
                </div>
                <button type="submit" class="btn btn-default">Submit</button>
              </form>
              <ul class="nav navbar-nav navbar-right">
                <li><a href="#">Link</a></li>
                
              </ul>
            </div><!-- /.navbar-collapse -->
          </div><!-- /.container-fluid -->
        </nav>

Step 5
Now would be a good moment to refresh your browser!
And if all went well, nothing changed!
But we should make two minor adjustments, first the Brand link should be replaced with the link to the root_path, and on the right side of the navbar, there should be two links: login and signup. 
-
      <a class="navbar-brand" href="#">StukPlaces</a>
+
      <%= link_to "StukPlaces", root_path, class: 'navbar-brand' %>
-
        <li><a href="#">Link</a></li>
+
        <li><a href="#">login</a></li>
        <li><a href="#">signup</a></li>

Step 6
After you inspected your browser again, it's time to commit and save our work.

git commit -m "Add the Header"



###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM

###########
15
INSTALL SIMPLE FORM


